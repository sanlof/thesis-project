/**
 * src/services/types.ts
 * ---------------------------------------------------------
 * Complete TypeScript type definitions for the Police-Hospital
 * Data Sharing System.
 *
 * This file provides type safety for all API interactions between
 * the frontend and both backend services (Police and Hospital).
 *
 * Backend Models:
 * - Police: Suspect { id, full_name, personal_id, flag }
 * - Hospital: Patient { id, full_name, personal_id, flag }
 *
 * Swedish Personal ID Format: YYYYMMDD-XXXX
 */

// ============================================================================
// CORE DATA MODELS (matching backend Rust structs)
// ============================================================================

/**
 * Suspect from the Police System
 *
 * Represents a person in the police database. All fields except `id`
 * are nullable as they correspond to Rust Option<T> types.
 *
 * @example
 * const suspect: Suspect = {
 *   id: 1,
 *   full_name: "Erik Andersson",
 *   personal_id: "19850312-2398",
 *   flag: false
 * };
 */
export interface Suspect {
  /** Database-generated unique identifier */
  id: number;

  /** Full name of the suspect (nullable) */
  full_name: string | null;

  /** Swedish personal ID in format YYYYMMDD-XXXX (nullable) */
  personal_id: string | null;

  /** Whether the suspect is flagged for hospital monitoring (nullable) */
  flag: boolean | null;
}

/**
 * Patient from the Hospital System
 *
 * Represents a person in the hospital database. Structure mirrors Suspect
 * as both systems track the same information. The flag field is automatically
 * synchronized from the police system via PostgreSQL triggers.
 *
 * @example
 * const patient: Patient = {
 *   id: 1,
 *   full_name: "Erik Andersson",
 *   personal_id: "19850312-2398",
 *   flag: true
 * };
 */
export interface Patient {
  /** Database-generated unique identifier */
  id: number;

  /** Full name of the patient (nullable) */
  full_name: string | null;

  /** Swedish personal ID in format YYYYMMDD-XXXX (nullable) */
  personal_id: string | null;

  /** Whether the patient is flagged by police (auto-synced) */
  flag: boolean | null;
}

// ============================================================================
// CREATE MODELS (for POST requests)
// ============================================================================

/**
 * Data required to create a new suspect
 *
 * Used in POST /suspects requests. The `id` is omitted as it's
 * auto-generated by the database. The `flag` defaults to false.
 *
 * @example
 * const newSuspect: CreateSuspect = {
 *   full_name: "Test Person",
 *   personal_id: "19990101-1234",
 *   flag: false
 * };
 */
export interface CreateSuspect {
  /** Full name of the suspect */
  full_name: string;

  /** Swedish personal ID in format YYYYMMDD-XXXX */
  personal_id: string;

  /** Initial flag status (optional, defaults to false) */
  flag?: boolean;
}

/**
 * Data required to create a new patient
 *
 * Used in POST /patients requests. The `id` is omitted as it's
 * auto-generated. Note: flags should be managed by the police system.
 *
 * @example
 * const newPatient: CreatePatient = {
 *   full_name: "Test Patient",
 *   personal_id: "19990101-1234",
 *   flag: false
 * };
 */
export interface CreatePatient {
  /** Full name of the patient */
  full_name: string;

  /** Swedish personal ID in format YYYYMMDD-XXXX */
  personal_id: string;

  /** Initial flag status (should be managed by police system) */
  flag?: boolean;
}

// ============================================================================
// UPDATE MODELS (for PUT requests)
// ============================================================================

/**
 * Data for updating an existing suspect
 *
 * Used in PUT /suspects/{id} requests. The `personal_id` is required
 * to identify the suspect. All other fields are optional.
 *
 * @example
 * const updates: UpdateSuspect = {
 *   personal_id: "19850312-2398",
 *   full_name: "Erik Gustav Andersson"
 * };
 */
export interface UpdateSuspect {
  /** Personal ID to identify the suspect (required) */
  personal_id: string;

  /** Updated full name (optional) */
  full_name?: string;

  /** Updated flag status (optional, prefer using FlagUpdate) */
  flag?: boolean;
}

/**
 * Data for updating an existing patient
 *
 * Used in PUT /patients/{id} requests. The `personal_id` is required.
 * Note: the `flag` field should not be updated manually as it's
 * synchronized from the police system.
 *
 * @example
 * const updates: UpdatePatient = {
 *   personal_id: "19850312-2398",
 *   full_name: "Erik Gustav Andersson"
 * };
 */
export interface UpdatePatient {
  /** Personal ID to identify the patient (required) */
  personal_id: string;

  /** Updated full name (optional) */
  full_name?: string;

  /** Flag status (should not be updated manually) */
  flag?: boolean;
}

/**
 * Data for updating a suspect's flag status
 *
 * Used exclusively in PUT /suspects/{personal_id}/flag requests.
 * This triggers automatic synchronization to the hospital database.
 *
 * @example
 * const flagUpdate: FlagUpdate = { flag: true };
 */
export interface FlagUpdate {
  /** New flag status (true = flagged, false = unflagged) */
  flag: boolean;
}

// ============================================================================
// API RESPONSE TYPES
// ============================================================================

/**
 * Standard error response from the API
 *
 * Returned when an API request fails (4xx or 5xx status code).
 *
 * @example
 * try {
 *   await policeApi.getSuspect(999);
 * } catch (error) {
 *   const apiError = error as ApiError;
 *   console.error(apiError.error); // "Suspect not found"
 * }
 */
export interface ApiError {
  /** Human-readable error message */
  error: string;
}

/**
 * Health check response from backend services
 *
 * Used to verify that backend services are running and healthy.
 *
 * @example
 * const health = await fetch('/health');
 * const data: HealthCheckResponse = await health.json();
 */
export interface HealthCheckResponse {
  /** Service health status */
  status: "healthy" | "unhealthy";

  /** Service identifier */
  service: "police-system" | "hospital-system";
}

// ============================================================================
// LOADING AND STATE MANAGEMENT TYPES
// ============================================================================

/**
 * Represents the loading state of an async operation
 *
 * Use this to track API request status and display appropriate UI.
 *
 * @example
 * const [loadingState, setLoadingState] = useState<LoadingState>('idle');
 */
export type LoadingState =
  | "idle" // Initial state, no request made yet
  | "loading" // Request in progress
  | "success" // Request completed successfully
  | "error"; // Request failed

/**
 * Represents the synchronization status of flags between systems
 *
 * Tracks flag sync between police and hospital databases.
 *
 * @example
 * const [syncStatus, setSyncStatus] = useState<SyncStatus>('idle');
 */
export type SyncStatus =
  | "idle" // No sync in progress
  | "syncing" // Sync in progress
  | "synced" // Successfully synchronized
  | "error" // Sync failed
  | "unknown"; // Sync status unknown

// ============================================================================
// UTILITY TYPES FOR API OPERATIONS
// ============================================================================

/**
 * Generic type for API query results
 *
 * Wraps data fetching with loading and error states.
 *
 * @typeParam T - The type of data being fetched
 *
 * @example
 * const [suspectQuery, setSuspectQuery] = useState<QueryResult<Suspect>>({
 *   data: null,
 *   loading: true,
 *   error: null
 * });
 */
export interface QueryResult<T> {
  /** The fetched data (null if not loaded or error occurred) */
  data: T | null;

  /** Whether the query is in progress */
  loading: boolean;

  /** Error message if the query failed (null if no error) */
  error: string | null;
}

/**
 * Generic type for list query results
 *
 * Similar to QueryResult but for operations that return arrays.
 *
 * @typeParam T - The type of items in the list
 *
 * @example
 * const [suspectsQuery, setSuspectsQuery] = useState<ListQueryResult<Suspect>>({
 *   data: [],
 *   loading: true,
 *   error: null
 * });
 */
export interface ListQueryResult<T> {
  /** Array of fetched items (empty if not loaded or error occurred) */
  data: T[];

  /** Whether the query is in progress */
  loading: boolean;

  /** Error message if the query failed (null if no error) */
  error: string | null;
}

/**
 * Mutation result for create/update/delete operations
 *
 * Tracks the status of POST, PUT, DELETE requests.
 *
 * @typeParam T - The type of data returned by the mutation
 *
 * @example
 * const [createResult, setCreateResult] = useState<MutationResult<Suspect>>({
 *   data: null,
 *   loading: false,
 *   error: null,
 *   success: false
 * });
 */
export interface MutationResult<T> {
  /** Result data from the mutation (null if not completed or failed) */
  data: T | null;

  /** Whether the mutation is in progress */
  loading: boolean;

  /** Error message if the mutation failed (null if no error) */
  error: string | null;

  /** Whether the mutation completed successfully */
  success: boolean;
}

// ============================================================================
// CROSS-SYSTEM COMMUNICATION TYPES
// ============================================================================

/**
 * Request parameters for cross-system queries
 *
 * Used when one system queries the other to check if a person exists.
 *
 * @example
 * const query: CrossSystemQuery = {
 *   personal_id: "19850312-2398",
 *   source_system: "hospital",
 *   target_system: "police"
 * };
 */
export interface CrossSystemQuery {
  /** Swedish personal ID to look up */
  personal_id: string;

  /** System making the query */
  source_system: "police" | "hospital";

  /** System being queried */
  target_system: "police" | "hospital";
}

/**
 * Result of a cross-system query
 *
 * Contains the found person (if any) and query metadata.
 *
 * @example
 * const result: CrossSystemQueryResult = {
 *   found: true,
 *   data: { id: 1, full_name: "Erik Andersson", ... },
 *   queried_at: new Date().toISOString()
 * };
 */
export interface CrossSystemQueryResult {
  /** Whether a matching person was found */
  found: boolean;

  /** The person data (Suspect or Patient depending on target) */
  data: Suspect | Patient | null;

  /** ISO timestamp of when the query was made */
  queried_at: string;
}

// ============================================================================
// FORM STATE TYPES
// ============================================================================

/**
 * Form validation errors
 *
 * Maps field names to error messages for display.
 *
 * @example
 * const [errors, setErrors] = useState<FormErrors>({});
 * setErrors({ personal_id: "Invalid format" });
 */
export interface FormErrors {
  [fieldName: string]: string;
}

/**
 * Form submission state
 *
 * Tracks form submission lifecycle including errors.
 *
 * @example
 * const [formState, setFormState] = useState<FormSubmitState>({
 *   submitting: false,
 *   submitted: false,
 *   errors: {}
 * });
 */
export interface FormSubmitState {
  /** Whether the form is currently being submitted */
  submitting: boolean;

  /** Whether the form has been successfully submitted */
  submitted: boolean;

  /** Field-level validation errors */
  errors: FormErrors;
}

// ============================================================================
// UI STATE TYPES
// ============================================================================

/**
 * Filter options for suspect/patient lists
 *
 * Client-side filtering without making new API requests.
 *
 * @example
 * const [filters, setFilters] = useState<FilterOptions>({
 *   flagged_only: false,
 *   search_term: ""
 * });
 */
export interface FilterOptions {
  /** Show only flagged individuals */
  flagged_only: boolean;

  /** Search by name or personal ID */
  search_term: string;
}

/**
 * Sort options for lists
 *
 * Controls how lists are sorted in the UI.
 *
 * @example
 * const [sortOptions, setSortOptions] = useState<SortOptions>({
 *   field: 'id',
 *   direction: 'asc'
 * });
 */
export interface SortOptions {
  /** Field to sort by */
  field: "id" | "full_name" | "personal_id" | "flag";

  /** Sort direction */
  direction: "asc" | "desc";
}

// ============================================================================
// CONTEXT STATE TYPES (for React Context API)
// ============================================================================

/**
 * Police system context state
 *
 * Global state for police system, shared via React Context.
 *
 * @example
 * const policeContext: PoliceContextState = {
 *   suspects: [],
 *   loading: false,
 *   error: null,
 *   selectedSuspect: null
 * };
 */
export interface PoliceContextState {
  /** All suspects from the police database */
  suspects: Suspect[];

  /** Loading state for suspect operations */
  loading: boolean;

  /** Error message if any operation failed */
  error: string | null;

  /** Currently selected suspect for detail view */
  selectedSuspect: Suspect | null;
}

/**
 * Hospital system context state
 *
 * Global state for hospital system, shared via React Context.
 *
 * @example
 * const hospitalContext: HospitalContextState = {
 *   patients: [],
 *   flaggedPatients: [],
 *   loading: false,
 *   error: null,
 *   selectedPatient: null
 * };
 */
export interface HospitalContextState {
  /** All patients from the hospital database */
  patients: Patient[];

  /** Filtered list of flagged patients */
  flaggedPatients: Patient[];

  /** Loading state for patient operations */
  loading: boolean;

  /** Error message if any operation failed */
  error: string | null;

  /** Currently selected patient for detail view */
  selectedPatient: Patient | null;
}

/**
 * Application-wide context state
 *
 * Top-level state shared across the entire application.
 *
 * @example
 * const appContext: AppContextState = {
 *   police: policeState,
 *   hospital: hospitalState,
 *   sync: {
 *     lastSyncTime: new Date().toISOString(),
 *     syncStatus: 'synced'
 *   }
 * };
 */
export interface AppContextState {
  /** Police system state */
  police: PoliceContextState;

  /** Hospital system state */
  hospital: HospitalContextState;

  /** Synchronization status between systems */
  sync: {
    lastSyncTime: string | null;
    syncStatus: SyncStatus;
  };
}

// ============================================================================
// TYPE GUARDS
// ============================================================================

/**
 * Type guard to check if a response is an API error
 *
 * @param response - The response to check
 * @returns True if the response is an ApiError
 *
 * @example
 * if (isApiError(error)) {
 *   console.error("API Error:", error.error);
 * }
 */
export function isApiError(response: unknown): response is ApiError {
  return (
    typeof response === "object" &&
    response !== null &&
    "error" in response &&
    typeof (response as ApiError).error === "string"
  );
}

/**
 * Type guard to check if an object is a valid Suspect
 *
 * @param obj - The object to check
 * @returns True if the object is a Suspect
 */
export function isSuspect(obj: unknown): obj is Suspect {
  return (
    typeof obj === "object" &&
    obj !== null &&
    "id" in obj &&
    typeof (obj as Suspect).id === "number"
  );
}

/**
 * Type guard to check if an object is a valid Patient
 *
 * @param obj - The object to check
 * @returns True if the object is a Patient
 */
export function isPatient(obj: unknown): obj is Patient {
  return (
    typeof obj === "object" &&
    obj !== null &&
    "id" in obj &&
    typeof (obj as Patient).id === "number"
  );
}
