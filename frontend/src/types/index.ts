/**
 * Type Definitions for Police-Hospital Data Sharing System
 *
 * This file contains all TypeScript types and interfaces used throughout
 * the frontend application, ensuring type safety when communicating with
 * the Rust backend services.
 */

// ============================================================================
// Core Data Models
// ============================================================================

/**
 * Suspect model from the police system
 *
 * Represents a suspect in the police database. All fields except `id` can be null
 * as they're optional in the backend (Rust Option<T> types).
 *
 * @example
 * const suspect: Suspect = {
 *   id: 1,
 *   full_name: "Erik Andersson",
 *   personal_id: "19850312-2398",
 *   flag: false
 * };
 */
export interface Suspect {
  /** Database-generated unique identifier */
  id: number;

  /** Full name of the suspect (nullable) */
  full_name: string | null;

  /** Swedish personal ID in format YYYYMMDD-XXXX (nullable) */
  personal_id: string | null;

  /** Whether the suspect is flagged for hospital monitoring (nullable) */
  flag: boolean | null;
}

/**
 * Patient model from the hospital system
 *
 * Represents a patient in the hospital database. Structure mirrors the Suspect
 * interface as both systems track the same core information about individuals.
 * The flag field is automatically synchronized from the police system.
 *
 * @example
 * const patient: Patient = {
 *   id: 1,
 *   full_name: "Erik Andersson",
 *   personal_id: "19850312-2398",
 *   flag: true
 * };
 */
export interface Patient {
  /** Database-generated unique identifier */
  id: number;

  /** Full name of the patient (nullable) */
  full_name: string | null;

  /** Swedish personal ID in format YYYYMMDD-XXXX (nullable) */
  personal_id: string | null;

  /** Whether the patient is flagged by police (synchronized automatically) */
  flag: boolean | null;
}

// ============================================================================
// Request Models (for creating new records)
// ============================================================================

/**
 * Data required to create a new suspect (POST request)
 *
 * Used when submitting a form to create a new suspect in the police system.
 * The `id` field is omitted as it's auto-generated by the database.
 * The `flag` field defaults to false if not provided.
 *
 * @example
 * const newSuspect: CreateSuspect = {
 *   full_name: "Test Person",
 *   personal_id: "19990101-1234",
 *   flag: false
 * };
 *
 * // POST to /suspects
 * await policeApi.createSuspect(newSuspect);
 */
export interface CreateSuspect {
  /** Full name of the suspect */
  full_name: string;

  /** Swedish personal ID in format YYYYMMDD-XXXX */
  personal_id: string;

  /** Initial flag status (defaults to false if omitted) */
  flag?: boolean;
}

/**
 * Data required to create a new patient (POST request)
 *
 * Used when submitting a form to register a new patient in the hospital system.
 * The `id` field is omitted as it's auto-generated by the database.
 * The `flag` field should typically not be set manually as it's synchronized
 * from the police system.
 *
 * @example
 * const newPatient: CreatePatient = {
 *   full_name: "Test Patient",
 *   personal_id: "19990101-1234",
 *   flag: false
 * };
 *
 * // POST to /patients
 * await hospitalApi.createPatient(newPatient);
 */
export interface CreatePatient {
  /** Full name of the patient */
  full_name: string;

  /** Swedish personal ID in format YYYYMMDD-XXXX */
  personal_id: string;

  /** Initial flag status (should be managed by police system) */
  flag?: boolean;
}

// ============================================================================
// Update Models (for modifying existing records)
// ============================================================================

/**
 * Data for updating an existing suspect (PUT request)
 *
 * Used when modifying suspect information. The `personal_id` is required to
 * identify which suspect to update. All other fields are optional - only
 * include fields that should be changed.
 *
 * @example
 * const updates: UpdateSuspect = {
 *   personal_id: "19850312-2398",
 *   full_name: "Erik Gustav Andersson" // Only updating name
 * };
 *
 * // PUT to /suspects/{id}
 * await policeApi.updateSuspect(suspectId, updates);
 */
export interface UpdateSuspect {
  /** Personal ID to identify the suspect (required) */
  personal_id: string;

  /** Updated full name (optional) */
  full_name?: string;

  /** Updated flag status (optional, but prefer using FlagUpdate for flag changes) */
  flag?: boolean;
}

/**
 * Data for updating an existing patient (PUT request)
 *
 * Used when modifying patient information. The `personal_id` is required to
 * identify which patient to update. Note: the `flag` field should not be
 * updated manually as it's synchronized from the police system.
 *
 * @example
 * const updates: UpdatePatient = {
 *   personal_id: "19850312-2398",
 *   full_name: "Erik Gustav Andersson"
 * };
 *
 * // PUT to /patients/{id}
 * await hospitalApi.updatePatient(patientId, updates);
 */
export interface UpdatePatient {
  /** Personal ID to identify the patient (required) */
  personal_id: string;

  /** Updated full name (optional) */
  full_name?: string;

  /** Flag status (should not be updated manually) */
  flag?: boolean;
}

/**
 * Data for updating a suspect's flag status
 *
 * Used exclusively for flag updates via the dedicated flag endpoint.
 * This triggers automatic synchronization to the hospital database.
 *
 * @example
 * const flagUpdate: FlagUpdate = {
 *   flag: true
 * };
 *
 * // PUT to /suspects/{personal_id}/flag
 * await policeApi.updateFlag("19850312-2398", flagUpdate);
 */
export interface FlagUpdate {
  /** New flag status (true = flagged, false = unflagged) */
  flag: boolean;
}

// ============================================================================
// API Response Types
// ============================================================================

/**
 * Standard error response from the API
 *
 * When an API request fails (4xx or 5xx status code), the response body
 * contains this structure with an error message explaining what went wrong.
 *
 * @example
 * try {
 *   await policeApi.getSuspect(999);
 * } catch (error) {
 *   const apiError = error as ApiError;
 *   console.error(apiError.error); // "Suspect not found"
 * }
 */
export interface ApiError {
  /** Human-readable error message */
  error: string;
}

/**
 * Health check response from backend services
 *
 * Used to verify that backend services are running and healthy.
 *
 * @example
 * const health = await policeApi.healthCheck();
 * console.log(health.status); // "healthy"
 * console.log(health.service); // "police-system"
 */
export interface HealthCheckResponse {
  /** Service health status */
  status: "healthy" | "unhealthy";

  /** Service identifier */
  service: "police-system" | "hospital-system";
}

// ============================================================================
// Loading State Management
// ============================================================================

/**
 * Represents the loading state of an async operation
 *
 * Use this type to track the status of API requests, displaying appropriate
 * UI feedback (spinners, error messages, etc.) based on the current state.
 *
 * @example
 * const [loadingState, setLoadingState] = useState<LoadingState>('idle');
 *
 * // Before request
 * setLoadingState('loading');
 *
 * try {
 *   const data = await policeApi.getAllSuspects();
 *   setLoadingState('success');
 * } catch (error) {
 *   setLoadingState('error');
 * }
 */
export type LoadingState =
  | "idle" // Initial state, no request made yet
  | "loading" // Request in progress
  | "success" // Request completed successfully
  | "error"; // Request failed

/**
 * Represents the synchronization status of flags between systems
 *
 * Used to track and display the status of flag synchronization between
 * the police and hospital databases. The sync happens automatically via
 * PostgreSQL triggers, but this helps provide UI feedback.
 *
 * @example
 * const [syncStatus, setSyncStatus] = useState<SyncStatus>('idle');
 *
 * // After updating flag in police system
 * setSyncStatus('syncing');
 *
 * // After verifying sync in hospital system
 * setSyncStatus('synced');
 */
export type SyncStatus =
  | "idle" // No sync in progress
  | "syncing" // Sync in progress
  | "synced" // Successfully synchronized
  | "error" // Sync failed (should be rare due to DB triggers)
  | "unknown"; // Sync status unknown

// ============================================================================
// Utility Types for API Operations
// ============================================================================

/**
 * Generic type for API query results
 *
 * Wraps data fetching operations with loading and error states, making it
 * easy to handle the full lifecycle of an API request in components.
 *
 * @typeParam T - The type of data being fetched
 *
 * @example
 * const [suspectQuery, setSuspectQuery] = useState<QueryResult<Suspect>>({
 *   data: null,
 *   loading: true,
 *   error: null
 * });
 *
 * // In useEffect
 * try {
 *   const suspect = await policeApi.getSuspect(id);
 *   setSuspectQuery({ data: suspect, loading: false, error: null });
 * } catch (error) {
 *   setSuspectQuery({ data: null, loading: false, error: error.message });
 * }
 *
 * // In render
 * if (suspectQuery.loading) return <Spinner />;
 * if (suspectQuery.error) return <Error message={suspectQuery.error} />;
 * if (suspectQuery.data) return <SuspectCard suspect={suspectQuery.data} />;
 */
export interface QueryResult<T> {
  /** The fetched data (null if not yet loaded or error occurred) */
  data: T | null;

  /** Whether the query is currently in progress */
  loading: boolean;

  /** Error message if the query failed (null if no error) */
  error: string | null;
}

/**
 * Generic type for list query results
 *
 * Similar to QueryResult but for operations that return arrays of data.
 * Useful for endpoints like GET /suspects or GET /patients that return lists.
 *
 * @typeParam T - The type of items in the list
 *
 * @example
 * const [suspectsQuery, setSuspectsQuery] = useState<ListQueryResult<Suspect>>({
 *   data: [],
 *   loading: true,
 *   error: null
 * });
 *
 * // After fetching
 * setSuspectsQuery({
 *   data: suspects,
 *   loading: false,
 *   error: null
 * });
 */
export interface ListQueryResult<T> {
  /** Array of fetched items (empty array if not yet loaded or error occurred) */
  data: T[];

  /** Whether the query is currently in progress */
  loading: boolean;

  /** Error message if the query failed (null if no error) */
  error: string | null;
}

/**
 * Mutation result type for create/update/delete operations
 *
 * Tracks the status of mutations (POST, PUT, DELETE requests) separately
 * from queries, since mutations have different semantics and UI patterns.
 *
 * @typeParam T - The type of data returned by the mutation
 *
 * @example
 * const [createResult, setCreateResult] = useState<MutationResult<Suspect>>({
 *   data: null,
 *   loading: false,
 *   error: null,
 *   success: false
 * });
 *
 * const handleCreate = async (data: CreateSuspect) => {
 *   setCreateResult({ ...createResult, loading: true });
 *
 *   try {
 *     const newSuspect = await policeApi.createSuspect(data);
 *     setCreateResult({
 *       data: newSuspect,
 *       loading: false,
 *       error: null,
 *       success: true
 *     });
 *   } catch (error) {
 *     setCreateResult({
 *       data: null,
 *       loading: false,
 *       error: error.message,
 *       success: false
 *     });
 *   }
 * };
 */
export interface MutationResult<T> {
  /** The result data from the mutation (null if not completed or failed) */
  data: T | null;

  /** Whether the mutation is currently in progress */
  loading: boolean;

  /** Error message if the mutation failed (null if no error) */
  error: string | null;

  /** Whether the mutation completed successfully */
  success: boolean;
}

// ============================================================================
// Cross-System Communication Types
// ============================================================================

/**
 * Request parameters for cross-system queries
 *
 * Used when one system (police or hospital) needs to query the other system
 * to check if a person exists in their database.
 *
 * @example
 * // Hospital checking if patient has police record
 * const query: CrossSystemQuery = {
 *   personal_id: "19850312-2398",
 *   source_system: "hospital",
 *   target_system: "police"
 * };
 */
export interface CrossSystemQuery {
  /** Swedish personal ID to look up */
  personal_id: string;

  /** System making the query */
  source_system: "police" | "hospital";

  /** System being queried */
  target_system: "police" | "hospital";
}

/**
 * Result of a cross-system query
 *
 * Contains the found person (if any) and metadata about the query.
 *
 * @example
 * const result: CrossSystemQueryResult = {
 *   found: true,
 *   data: { id: 1, full_name: "Erik Andersson", ... },
 *   queried_at: new Date().toISOString()
 * };
 */
export interface CrossSystemQueryResult {
  /** Whether a matching person was found */
  found: boolean;

  /** The person data (Suspect or Patient, depending on target system) */
  data: Suspect | Patient | null;

  /** ISO timestamp of when the query was made */
  queried_at: string;
}

// ============================================================================
// Form State Types
// ============================================================================

/**
 * Form validation errors
 *
 * Maps form field names to their error messages. Used to display
 * field-specific validation errors in forms.
 *
 * @example
 * const [errors, setErrors] = useState<FormErrors>({});
 *
 * // Validate personal ID
 * if (!validatePersonalId(formData.personal_id)) {
 *   setErrors({
 *     ...errors,
 *     personal_id: "Invalid personal ID format. Use YYYYMMDD-XXXX"
 *   });
 * }
 */
export interface FormErrors {
  [fieldName: string]: string;
}

/**
 * Form submission state
 *
 * Tracks the state of a form submission, including any errors.
 *
 * @example
 * const [formState, setFormState] = useState<FormSubmitState>({
 *   submitting: false,
 *   submitted: false,
 *   errors: {}
 * });
 */
export interface FormSubmitState {
  /** Whether the form is currently being submitted */
  submitting: boolean;

  /** Whether the form has been successfully submitted */
  submitted: boolean;

  /** Field-level validation errors */
  errors: FormErrors;
}

// ============================================================================
// UI State Types
// ============================================================================

/**
 * Filter options for suspect/patient lists
 *
 * Used to filter displayed items in the UI without making new API requests.
 *
 * @example
 * const [filters, setFilters] = useState<FilterOptions>({
 *   flagged_only: false,
 *   search_term: ""
 * });
 *
 * const filteredSuspects = suspects.filter(s => {
 *   if (filters.flagged_only && !s.flag) return false;
 *   if (filters.search_term && !s.full_name?.includes(filters.search_term)) return false;
 *   return true;
 * });
 */
export interface FilterOptions {
  /** Show only flagged individuals */
  flagged_only: boolean;

  /** Search by name or personal ID */
  search_term: string;
}

/**
 * Sort options for lists
 *
 * Controls how lists are sorted in the UI.
 *
 * @example
 * const [sortOptions, setSortOptions] = useState<SortOptions>({
 *   field: 'id',
 *   direction: 'asc'
 * });
 */
export interface SortOptions {
  /** Field to sort by */
  field: "id" | "full_name" | "personal_id" | "flag";

  /** Sort direction */
  direction: "asc" | "desc";
}

// ============================================================================
// Context Types (for React Context API)
// ============================================================================

/**
 * Police system context state
 *
 * Global state for the police system, shared across components via React Context.
 *
 * @example
 * const policeContext: PoliceContextState = {
 *   suspects: [],
 *   loading: false,
 *   error: null,
 *   selectedSuspect: null
 * };
 */
export interface PoliceContextState {
  /** All suspects from the police database */
  suspects: Suspect[];

  /** Loading state for suspect operations */
  loading: boolean;

  /** Error message if any operation failed */
  error: string | null;

  /** Currently selected suspect for detail view */
  selectedSuspect: Suspect | null;
}

/**
 * Hospital system context state
 *
 * Global state for the hospital system, shared across components via React Context.
 *
 * @example
 * const hospitalContext: HospitalContextState = {
 *   patients: [],
 *   flaggedPatients: [],
 *   loading: false,
 *   error: null,
 *   selectedPatient: null
 * };
 */
export interface HospitalContextState {
  /** All patients from the hospital database */
  patients: Patient[];

  /** Filtered list of flagged patients (for quick access) */
  flaggedPatients: Patient[];

  /** Loading state for patient operations */
  loading: boolean;

  /** Error message if any operation failed */
  error: string | null;

  /** Currently selected patient for detail view */
  selectedPatient: Patient | null;
}

/**
 * Application-wide context state
 *
 * Top-level state shared across the entire application.
 *
 * @example
 * const appContext: AppContextState = {
 *   police: policeState,
 *   hospital: hospitalState,
 *   sync: {
 *     lastSyncTime: new Date().toISOString(),
 *     syncStatus: 'synced'
 *   }
 * };
 */
export interface AppContextState {
  /** Police system state */
  police: PoliceContextState;

  /** Hospital system state */
  hospital: HospitalContextState;

  /** Synchronization status between systems */
  sync: {
    lastSyncTime: string | null;
    syncStatus: SyncStatus;
  };
}

// ============================================================================
// Type Guards and Utilities
// ============================================================================

/**
 * Type guard to check if a response is an API error
 *
 * @param response - The response to check
 * @returns True if the response is an ApiError
 *
 * @example
 * try {
 *   const suspect = await policeApi.getSuspect(id);
 * } catch (error) {
 *   if (isApiError(error)) {
 *     console.error("API Error:", error.error);
 *   }
 * }
 */
export function isApiError(response: unknown): response is ApiError {
  return (
    typeof response === "object" &&
    response !== null &&
    "error" in response &&
    typeof (response as ApiError).error === "string"
  );
}

/**
 * Type guard to check if an object is a valid Suspect
 *
 * @param obj - The object to check
 * @returns True if the object is a Suspect
 */
export function isSuspect(obj: unknown): obj is Suspect {
  return (
    typeof obj === "object" &&
    obj !== null &&
    "id" in obj &&
    typeof (obj as Suspect).id === "number"
  );
}

/**
 * Type guard to check if an object is a valid Patient
 *
 * @param obj - The object to check
 * @returns True if the object is a Patient
 */
export function isPatient(obj: unknown): obj is Patient {
  return (
    typeof obj === "object" &&
    obj !== null &&
    "id" in obj &&
    typeof (obj as Patient).id === "number"
  );
}

// ============================================================================
// Export all types
// ============================================================================

// Note: All types are already exported with the 'export' keyword above.
// This section serves as documentation of what's available from this module.

/**
 * Summary of exported types:
 *
 * Core Models:
 * - Suspect, Patient
 * - CreateSuspect, CreatePatient
 * - UpdateSuspect, UpdatePatient
 * - FlagUpdate
 *
 * API Types:
 * - ApiError
 * - HealthCheckResponse
 * - LoadingState
 * - SyncStatus
 *
 * Utility Types:
 * - QueryResult<T>
 * - ListQueryResult<T>
 * - MutationResult<T>
 *
 * Cross-System:
 * - CrossSystemQuery
 * - CrossSystemQueryResult
 *
 * Form State:
 * - FormErrors
 * - FormSubmitState
 *
 * UI State:
 * - FilterOptions
 * - SortOptions
 *
 * Context State:
 * - PoliceContextState
 * - HospitalContextState
 * - AppContextState
 *
 * Type Guards:
 * - isApiError()
 * - isSuspect()
 * - isPatient()
 */
